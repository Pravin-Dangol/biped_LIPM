function dx = dx_vector_field(~,x,a)

%Computes vector field x_dot = f(x) + g(x)*u

%Required inputs: x - all states [q; q_dot] and a - Bezier coeffs

t_temp = num2cell(x(1:3)); [q1, q2, q3] = t_temp{:};
dt_temp = num2cell(x(4:6)); [dq1, dq2, dq3] = dt_temp{:};

[D,C,G,B] = state_matrix(x);        %Get state matrix using full states x

%Compute fx and gx
Fx = [x(4:6); D\(-C*x(4:6)-G)]; 
Gx = [zeros(3,2);D\B];

% Bezier coefficients for q2
a21 = a(1); a22 = a(2); a23 = a(3); a24 = a(4); a25 = a(5); 
a2 = a(1:5);
% Bezier coefficients for q3
a31 = a(6); a32 = a(7); a33 = a(8); a34 = a(9); a35 = a(10); 
a3 = a(6:10);

%s variable used in bezier polynomial
delq = deg2rad(30);             %difference between min and max q1
s = (q1 + delq/2)/delq;         %normalized general coordinate

b2 = bezier(s,4,a2);
b3 = bezier(s,4,a3);

%Output variable
h = [q2 - b2; q3 - b3];         %y = h(x) = Hq - hd

dh_dx = [ 0, 1, 0, 0, 0, 0;...
    0, 0, 1, 0, 0, 0];
dh_dx(1,1) = ((10000*a22*((2500*q1)/1309 - 3/2)^3)/1309 - (10000*a21*((2500*q1)/1309 - 3/2)^3)/1309 + (10000*a24*((2500*q1)/1309 - 1/2)^3)/1309 - (10000*a25*((2500*q1)/1309 - 1/2)^3)/1309 + (30000*a22*((2500*q1)/1309 - 1/2)*((2500*q1)/1309 - 3/2)^2)/1309 + (30000*a24*((2500*q1)/1309 - 1/2)^2*((2500*q1)/1309 - 3/2))/1309 - 6*a23*((2500*q1)/1309 - 3/2)^2*((12500000*q1)/1713481 - 2500/1309) - 6*a23*((2500*q1)/1309 - 1/2)^2*((12500000*q1)/1713481 - 7500/1309))/delq;
dh_dx(2,1) = ((10000*a32*((2500*q1)/1309 - 3/2)^3)/1309 - (10000*a31*((2500*q1)/1309 - 3/2)^3)/1309 + (10000*a34*((2500*q1)/1309 - 1/2)^3)/1309 - (10000*a35*((2500*q1)/1309 - 1/2)^3)/1309 + (30000*a32*((2500*q1)/1309 - 1/2)*((2500*q1)/1309 - 3/2)^2)/1309 + (30000*a34*((2500*q1)/1309 - 1/2)^2*((2500*q1)/1309 - 3/2))/1309 - 6*a33*((2500*q1)/1309 - 3/2)^2*((12500000*q1)/1713481 - 2500/1309) - 6*a33*((2500*q1)/1309 - 1/2)^2*((12500000*q1)/1713481 - 7500/1309))/delq;

Lfh = dh_dx*Fx;

dLfh = [ -dq1*((75000000*a21*((2500*q1)/1309 - 3/2)^2)/1713481 + (75000000*a23*((2500*q1)/1309 - 1/2)^2)/1713481 - (150000000*a22*((2500*q1)/1309 - 3/2)^2)/1713481 - (150000000*a24*((2500*q1)/1309 - 1/2)^2)/1713481 + (75000000*a23*((2500*q1)/1309 - 3/2)^2)/1713481 + (75000000*a25*((2500*q1)/1309 - 1/2)^2)/1713481 - (30000*a24*((2500*q1)/1309 - 3/2)*((12500000*q1)/1713481 - 2500/1309))/1309 - (30000*a22*((2500*q1)/1309 - 1/2)*((12500000*q1)/1713481 - 7500/1309))/1309 + 12*a23*((12500000*q1)/1713481 - 2500/1309)*((12500000*q1)/1713481 - 7500/1309)), 0, 0, (10000*a22*((2500*q1)/1309 - 3/2)^3)/1309 - (10000*a21*((2500*q1)/1309 - 3/2)^3)/1309 + (10000*a24*((2500*q1)/1309 - 1/2)^3)/1309 - (10000*a25*((2500*q1)/1309 - 1/2)^3)/1309 + (30000*a22*((2500*q1)/1309 - 1/2)*((2500*q1)/1309 - 3/2)^2)/1309 + (30000*a24*((2500*q1)/1309 - 1/2)^2*((2500*q1)/1309 - 3/2))/1309 - 6*a23*((2500*q1)/1309 - 3/2)^2*((12500000*q1)/1713481 - 2500/1309) - 6*a23*((2500*q1)/1309 - 1/2)^2*((12500000*q1)/1713481 - 7500/1309), 1, 0;...
-dq1*((75000000*a31*((2500*q1)/1309 - 3/2)^2)/1713481 + (75000000*a33*((2500*q1)/1309 - 1/2)^2)/1713481 - (150000000*a32*((2500*q1)/1309 - 3/2)^2)/1713481 - (150000000*a34*((2500*q1)/1309 - 1/2)^2)/1713481 + (75000000*a33*((2500*q1)/1309 - 3/2)^2)/1713481 + (75000000*a35*((2500*q1)/1309 - 1/2)^2)/1713481 - (30000*a34*((2500*q1)/1309 - 3/2)*((12500000*q1)/1713481 - 2500/1309))/1309 - (30000*a32*((2500*q1)/1309 - 1/2)*((12500000*q1)/1713481 - 7500/1309))/1309 + 12*a33*((12500000*q1)/1713481 - 2500/1309)*((12500000*q1)/1713481 - 7500/1309)), 0, 0, (10000*a32*((2500*q1)/1309 - 3/2)^3)/1309 - (10000*a31*((2500*q1)/1309 - 3/2)^3)/1309 + (10000*a34*((2500*q1)/1309 - 1/2)^3)/1309 - (10000*a35*((2500*q1)/1309 - 1/2)^3)/1309 + (30000*a32*((2500*q1)/1309 - 1/2)*((2500*q1)/1309 - 3/2)^2)/1309 + (30000*a34*((2500*q1)/1309 - 1/2)^2*((2500*q1)/1309 - 3/2))/1309 - 6*a33*((2500*q1)/1309 - 3/2)^2*((12500000*q1)/1713481 - 2500/1309) - 6*a33*((2500*q1)/1309 - 1/2)^2*((12500000*q1)/1713481 - 7500/1309), 0, 1];
 
epsilon = 0.1; alpha = 0.9;

%scaling
Lfh = epsilon*Lfh;

phi(1) = h(1) + 1/(2 - alpha)*sign(Lfh(1))*abs(Lfh(1))^(2-alpha);
phi(2) = h(2) + 1/(2 - alpha)*sign(Lfh(2))*abs(Lfh(2))^(2-alpha);

psi(1,1) = -sign(Lfh(1))*abs(Lfh(1))^alpha - sign(phi(1))*abs(phi(1))^(alpha/(2-alpha));
psi(2,1) = -sign(Lfh(2))*abs(Lfh(2))^alpha - sign(phi(2))*abs(phi(2))^(alpha/(2-alpha));

v = 1/epsilon^2*psi;

%u = LgLfh^-1*(v - L2fh) needed to cancel non-linearity
u = (dLfh*Gx)\(v-dLfh*Fx);

dx = Fx + Gx*u;

end